#lang racket/base

(provide (all-defined-out))

(struct syntax-element (loc) #:transparent)

(struct source-element syntax-element () #:transparent)

(struct expr syntax-element () #:transparent)
(struct expr:this expr () #:transparent)
(struct expr:id expr (symbol) #:transparent)
(struct expr:null expr () #:transparent)
(struct expr:bool expr (value) #:transparent)
(struct expr:number expr (value) #:transparent)
(struct expr:string expr (value) #:transparent)
(struct expr:array expr (elements) #:transparent)
(struct expr:object expr (properties) #:transparent)
(struct expr:fn expr (def) #:transparent)
(struct expr:member expr (object property) #:transparent)
(struct expr:new expr (ctor args) #:transparent)
(struct expr:call expr (fn args) #:transparent)
(struct expr:postfix expr (expr op) #:transparent)
(struct expr:unary expr (op expr) #:transparent)
(struct expr:binary expr (left op right) #:transparent)
(struct expr:cond expr (test true false) #:transparent)
(struct expr:comma expr (left right) #:transparent)

(struct init syntax-element () #:transparent)
(struct init:obj:prop init (name value) #:transparent)
(struct init:obj:get init (prop fn) #:transparent)
(struct init:obj:set init (prop fn) #:transparent)

(struct decl:fn source-element (def) #:transparent)
(struct decl:var syntax-element (id expr) #:transparent)

(struct stmt source-element () #:transparent)
(struct stmt:block stmt (stmts) #:transparent)
(struct stmt:vars stmt (decls) #:transparent)
(struct stmt:empty stmt () #:transparent)
(struct stmt:expr stmt (expr) #:transparent)
(struct stmt:if stmt (test true false) #:transparent)
(struct stmt:do stmt (body test) #:transparent)
(struct stmt:while stmt (test body) #:transparent)
(struct stmt:for stmt (init test update body) #:transparent)
(struct stmt:for-in stmt (i expr body) #:transparent)
(struct stmt:continue stmt (label) #:transparent)
(struct stmt:break stmt (label) #:transparent)
(struct stmt:return stmt (expr) #:transparent)
(struct stmt:with stmt (expr body) #:transparent)
(struct stmt:switch stmt (expr cases) #:transparent)
(struct stmt:labelled stmt (label stmt) #:transparent)
(struct stmt:throw stmt (expr) #:transparent)
(struct stmt:try stmt (block catch finally) #:transparent)
(struct stmt:debugger stmt () #:transparent)

(struct fn syntax-element (name params body) #:transparent)
